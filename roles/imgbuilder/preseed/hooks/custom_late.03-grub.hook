#!/bin/sh

logger -t custom_late.sh "modify /etc/grub.d/00_header and run update-grub"

cat > /target/tmp/00_header.patch << "ENDOFFILE"
diff --git a/util/grub.d/00_header.in b/util/grub.d/00_header.in
index 8dc5592..7ab59e3 100644
--- a/util/grub.d/00_header.in
+++ b/util/grub.d/00_header.in
@@ -102,23 +102,42 @@ function savedefault {
 EOF
 
 if [ "$quick_boot" = 1 ]; then
-    cat <<EOF
+  cat <<EOF
 function recordfail {
   set recordfail=1
 EOF
+
+  check_writable () {
+    abstractions="$(grub-probe --target=abstraction "${grubdir}")"
+    for abstraction in $abstractions; do
+      case "$abstraction" in
+	diskfilter | lvm)
+	  cat <<EOF
+  # GRUB lacks write support for $abstraction, so recordfail support is disabled.
+EOF
+	  return
+	  ;;
+      esac
+    done
+
     FS="$(grub-probe --target=fs "${grubdir}")"
     case "$FS" in
       btrfs | cpiofs | newc | odc | romfs | squash4 | tarfs | zfs)
 	cat <<EOF
   # GRUB lacks write support for $FS, so recordfail support is disabled.
 EOF
+	return
 	;;
-      *)
-	cat <<EOF
-  if [ -n "\${have_grubenv}" ]; then if [ -z "\${boot_once}" ]; then save_env recordfail; fi; fi
-EOF
     esac
+
     cat <<EOF
+  if [ -n "\${have_grubenv}" ]; then if [ -z "\${boot_once}" ]; then save_env recordfail; fi; fi
+EOF
+  }
+
+  check_writable
+
+  cat <<EOF
 }
 EOF
 fi
ENDOFFILE

in-target sh -c "cat /tmp/00_header.patch | patch /etc/grub.d/00_header"
in-target update-grub
