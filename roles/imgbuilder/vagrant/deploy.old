#valibhy
#
# vagrant-libvirt-hypervisor(kvm/xen) salt-cloud provider

#state.sls roles.imgbuilder.tools.list_all

{% macro vm-Vagrantfile(name, hostname, options) %}
# render target vagrantfile with minion_keys and custom pillar overwriting memsize and cpus
{% endmacro %}

{% macro vm-salt-preseed(minion_id_aka_hostname%}
# salt-key --gen-keys=[minion_id]
# cp [minion_id].pub /etc/salt/pki/master/minions/[minion_id]
{% endmacro %}

#clean host file from salt hostname
#copy key to host, and re/bootstrap salt
#disable vagrant user, remove vagrant sudo, remove vagrant authorized_keys

{% macro vm-halt(name) %}
{{ name }}-vm-halt:
  cmd.run:
    - name: cd /mnt/images/templates/imgbuilder/{{ name }}-vm; vagrant halt
    - user: imgbuilder
    - group: imgbuilder
#    - require:
#      - cmd: {{ name }}-vm-provision
{% endmacro %}

{% macro vm-detach(name) %}
{{ name }}-vm-detach:
  file.absent:
    - name: /mnt/images/templates/imgbuilder/{{ name }}-vm/.vagrant
    - require:
      - cmd: {{ name }}-vm-halt
  cmd.run:
    - name: virsh dumpxml $vmname --inactive > /mnt/images/templates/imgbuilder/{{ name }}-vm/libvirt.xml
    - creates: /mnt/images/templates/imgbuilder/{{ name }}-vm/libvirt.xml
    - require:
      - file: {{ name }}-vm-detach
{% endmacro %}

{% macro vm-memsize-cpus(name,mems√≠ze,cpus) %}
{{ name }}-vm-memsize-cpus:
  cmd.run:
    - name: /mnt/images/templates/imgbuilder/scripts/memsize-cpus {{ name }} 768 2
    - require:
      - cmd: {{ name }}-vm-detach
{% endmacro %}

{% macro vm-move-network(name) %}
{{ name }}-vm-move-network:
  cmd.run:
msub "<interface type=.+<mac address=.([0-9a-f:]+).+</interface>" "<interface type=\"bridge\"><mac address=\"\\1\"/><source bridge=\"$bridge\"/></interface>" > ${vmname}.xml    - name: /mnt/images/templates/imgbuilder/scripts/def2bridge {{ name }} br1
    - require:
      - cmd: {{ name }}-vm-memsize-cpus
{% endmacro %}

{% macro spicify(name) %}

{% for i, ms,me,co in [
(0, "<video>", "</video>", "<video><model type=\"qxl\"/></video>"),
(1, "<channel type=.spicevmc", "</channel>", ""),
(2, "<graphics type", "</channel>", "<graphics type=\"spice\" autoport=\"yes\" /><channel type=\"spicevmc\"><target type=\"virtio\" name=\"com.redhat.spice.0\"/></channel>"),
] %}

{{ name }}-spicify-{{ i }}
  file.blockreplace:
    - name: /mnt/images/templates/imgbuilder/{{ name }}-vm/libvirt.xml
    - marker_start: ms
    - marker_end: me
    - content: co
    - require: 
      - cmd: {{ name }}-vm-move-network
{% endfor %}

{% endmacro %}


{% macro vm-copy-resize(name) %}
{{ name }}-vm-copy-resize:
  cmd.run:
    - name: /mnt/images/templates/imgbuilder/scripts/copy_resize {{ name }} vg0 15G
virt-resize $sourcefile /dev/mapper/$volumegroup-$volumename $expand_pt $expand_lv

    - user: imgbuilder
    - group: imgbuilder
    - require:
      - cmd: {{ name }}-spicify
{% endmacro %}

{% macro present-autostart(name) %}
{{ name }}-present-autostart:
  cmd.run:
    - name: /mnt/images/templates/imgbuilder/scripts/start_and_autostart {{ name }}
    - user: imgbuilder
    - group: imgbuilder
    - require:
      - cmd: {{ name }}-vm-copy-resize
{% endmacro %}

#if lv:
#    recreate lv with final size
#
#virsh dumpxml {{ name }}-vm_default | xpath -q -e /domain/devices/disk/source
#
#virsh pool-list
#virsh vol-create-as poolname newvol 10G
#virt-resize image lvlg  --expand /dev/sda2 --LV-expand /dev/vg_guest/lv_root 
#virt-resize image otherimage --resize /dev/sda2=final size --LV-expand /dev/vg_guest/lv_root 
#virt-resize /mnt/images/default/{{ name }}-vm_default.img /dev/mapper/vg0-{{ name }}--vm_default --expand /dev/sda2  --LV-expand /dev/ubuntu1204-vg/root
#
##virsh dumpxml ttrss-vm_default | xpath -q -e /domain/devices/disk/source
#
#virsh pool-list
#virsh vol-create-as poolname newvol 10G
#virt-resize image lvlg  --expand /dev/sda2 --LV-expand /dev/vg_guest/lv_root 
#virt-resize image otherimage --resize /dev/sda2=final size --LV-expand /dev/vg_guest/lv_root 
#virt-resize /mnt/images/default/ttrss-vm_default.img /dev/mapper/vg0-ttrss--vm_default --expand /dev/sda2  --LV-expand /dev/ubuntu1204-vg/root
   sourcefile=$1; 
volumegroup="vg0"
volumename=$2
volumesize=$3
expand_pt=" --expand $4"

#lvcreate --name $volumename --size ${volumesizesize} $volumegroup
echo "virt-resize $sourcefile /dev/mapper/$volumegroup-$volumename $expand_pt $expand_lv"


---

msub() {
  python -c "import sys, re; sys.stdout.write(re.sub(r'$1', r'$2', sys.stdin.read(), flags=re.MULTILINE + re.DOTALL))"
}

vmname=$1
bridge=$2

virsh dumpxml $vmname --inactive | 

cat ${vmname}.xml
virsh define ${vmname}.xml


---

sourceformat=$1
sourcefile=$2
volumegroup=vg0
volumename=$3

virtsizeresponse=`qemu-img info "$sourcefile" | grep virtual.size`
virtsize=`echo "$virtsizeresponse" | sed -re "s/virtual.size:.[0-9.]+[KMGT].\(([0-9]+).bytes\)/\\1/g"`
echo "Size: $virtsizeresponse ($virtsize)"
lvcreate --name $volumename --size ${virtsize}b $volumegroup
for d in /sys/block/sd[a-z]/queue/scheduler; do echo "old: $d => $(cat $d)"; echo cfq > $d ; echo "new: $d => $(cat $d)"; done
# ionice needs cfq scheduler to be effectiv, we are setting 
nice -n 19 ionice -c 3 qemu-img convert -f $sourceformat -O raw $sourcefile /dev/mapper/$volumegroup-$volumename
for d in /sys/block/sd[a-z]/queue/scheduler; do echo "old: $d => $(cat $d)"; echo deadline > $d ; echo "new: $d => $(cat $d)"; done


---

exportformat=$2
exportfile=$3

volumegroup=vg0
volumename=$1
volumepath=/dev/${volumegroup}/${volumename}
if test ! -e $volumepath; then echo "$volumepath not found"; usage; fi

for d in /sys/block/sd[a-z]/queue/scheduler; do echo "old: $d => $(cat $d)"; echo cfq > $d ; echo "new: $d => $(cat $d)"; done

# ionice needs cfq scheduler to be effectiv, we are setting 
nice -n 19 ionice -c 3 qemu-img convert -O $exportformat $volumepath $exportfile

for d in /sys/block/sd[a-z]/queue/scheduler; do echo "old: $d => $(cat $d)"; echo deadline > $d ; echo "new: $d => $(cat $d)"; done

---


msub() {
  python -c "import sys, re; sys.stdout.write(re.sub(r'$1', r'$2', sys.stdin.read(), flags=re.MULTILINE + re.DOTALL))"
}

vmname=$1

virsh dumpxml $vmname --inactive | 
#cat ${vmname}.xml
virsh define ${vmname}.xml

